

CREATE OR REPLACE PROCEDURE UTILS.COALESCE.TEST_REGISTROS_ANALYSIS("TABLE_FQN" VARCHAR, "DATE_COLUMN" VARCHAR, "THRESHOLD" NUMBER(38,0))
RETURNS TABLE ("DATEN" VARCHAR, "CONTEO_REGISTROS" NUMBER(38,0), "PROMEDIO_REGISTROS" FLOAT, "DESV_EST_REGISTROS" FLOAT)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
  rs RESULTSET;
  query STRING;
  safe_table STRING := REPLACE(table_fqn, '''''''', '''''''''''');
  safe_column STRING := REPLACE(date_column, '''''''', '''''''''''');
  safe_threshold STRING := CAST(threshold AS STRING);
BEGIN
  query := ''
WITH FECHAS_DISTINTAS AS (
    SELECT DISTINCT
        CAST('' || safe_column || '' AS DATE) AS DATEN_DATE,
        DAYOFWEEK(DATEN_DATE) as dia_semana
    FROM '' || safe_table || ''
    WHERE DAYOFWEEK(DATEN_DATE) <> 0
    AND DATEN_DATE < CURRENT_DATE()
    ORDER BY DATEN_DATE DESC
),
FECHAS_ORDENADAS AS (
    SELECT
        DATEN_DATE,
        ROW_NUMBER() OVER(ORDER BY DATEN_DATE DESC) ORDER_FECHAS
    FROM FECHAS_DISTINTAS
),
ULTIMOS_60 AS (
    SELECT
        *
    FROM FECHAS_ORDENADAS
    WHERE ORDER_FECHAS <= 60
),
CONTEO_FECHAS AS (
    SELECT 
        CAST(A.'' || safe_column || '' AS DATE) AS DATEN_DATE,
        COUNT(1) AS CONTEO_REGISTROS
    FROM '' || safe_table || '' A
    INNER JOIN ULTIMOS_60 B
    ON
        CAST(A.'' || safe_column || '' AS DATE) = B.DATEN_DATE
    GROUP BY CAST(A.'' || safe_column || '' AS DATE)
    ORDER BY DATEN_DATE DESC
),
CONTEO_CON_PROMEDIO AS (
    SELECT 
        A.*,
        AVG(CONTEO_REGISTROS) OVER(PARTITION BY 1) AS PROMEDIO_REGISTROS,
        STDDEV(CONTEO_REGISTROS) OVER(PARTITION BY 1) AS DESV_EST_REGISTROS
    FROM CONTEO_FECHAS A
)
SELECT 
    TO_VARCHAR(DATEN_DATE, ''''YYYY-MM-DD'''') AS DATEN,
    CONTEO_REGISTROS,
    CAST(PROMEDIO_REGISTROS AS FLOAT) AS PROMEDIO_REGISTROS,
    CAST(DESV_EST_REGISTROS AS FLOAT) AS DESV_EST_REGISTROS
FROM CONTEO_CON_PROMEDIO
WHERE 
    ABS(CONTEO_REGISTROS - PROMEDIO_REGISTROS)/NULLIF(DESV_EST_REGISTROS, 0) > '' || safe_threshold || '';'';
  
  rs := (EXECUTE IMMEDIATE :query);
  RETURN TABLE(rs);
END;
';

SELECT *
FROM TABLE(UTILS.COALESCE.TEST_REGISTROS_ANALYSIS(
  'TEST_BRONZE.COMERCIAL.STG_ZFIT_HEAD_LIQR', -- BASE_DE_DATA.ESQUEMA.TABLA
  'DATEN', -- FECHA DE LA TABLA 
  5 -- PORCENTAJE DE ACEPTACION 
));

SELECT *
FROM TABLE(UTILS.COALESCE.TEST_REGISTROS_ANALYSIS(
  '"DEV_BRONZE_M"."COMERCIAL"."STG_VIEW_VENDASBR_ML"', 
  'SALESDATE', 
  5 
));

SELECT *
FROM TABLE(UTILS.COALESCE.TEST_REGISTROS_ANALYSIS(
  '"TEST_BRONZE"."COMERCIAL"."STG_VENTA"', 
  'IDFECONTABILIZACION', 
  6 
))
;

/////////////// DAMOS LOS PERMISOS A LOS ROLES PARA QUE PUEDAN USAR ESTE PROCEDIMIENTO /////// 
GRANT USAGE ON DATABASE UTILS TO ROLE ROLE_APP_COALESCE;
GRANT USAGE ON SCHEMA UTILS.COALESCE TO ROLE ROLE_APP_COALESCE;
GRANT USAGE ON PROCEDURE UTILS.COALESCE.TEST_REGISTROS_ANALYSIS(VARCHAR, VARCHAR, NUMBER) TO ROLE ROLE_APP_COALESCE;

GRANT USAGE ON DATABASE UTILS TO ROLE ROLE_APP_COALESCE;
GRANT USAGE ON SCHEMA UTILS.COALESCE TO ROLE ROLE_APP_COALESCE;
GRANT USAGE ON PROCEDURE UTILS.COALESCE.TEST_REGISTROS_ANALYSIS(VARCHAR, VARCHAR, NUMBER) TO ROLE ROLE_APP_COALESCE;

GRANT USAGE ON PROCEDURE UTILS.COALESCE.TEST_REGISTROS_ANALYSIS(VARCHAR, VARCHAR, NUMBER) TO ROLE ROLE_DE_CONTRACTOR_GT;
GRANT USAGE ON PROCEDURE UTILS.COALESCE.TEST_REGISTROS_ANALYSIS(VARCHAR, VARCHAR, NUMBER) TO ROLE ROLE_DE_CONTRACTOR_GT;